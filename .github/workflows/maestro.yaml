name: Maestro E2E with Docker Android Emulator

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write

jobs:
  maestro-e2e:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    services:
      emulator:
        image: budtmo/docker-android:emulator_11.0
        ports:
          - 6080:6080
          - 5554:5554
          - 5555:5555
        options: >-
          --privileged
          --device /dev/kvm
          -e EMULATOR_DEVICE="Samsung Galaxy S10"
          -e WEB_VNC=true
          -e APPIUM=false
          -e AUTO_RECORD=false
          -e ENFORCE_DEV_MODE=false

    steps:
      - name: 👅 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Build APK
        run: ./gradlew assembleDebug

      - name: 🧰 Install Maestro CLI
        run: |
          curl -Ls https://get.maestro.mobile.dev | bash
          echo "$HOME/.maestro/bin" >> $GITHUB_PATH

      - name: 🧰 Install ADB
        run: |
          sudo apt-get update
          sudo apt-get install -y android-tools-adb

      - name: 🛠️ Wait for Emulator
        run: |
          adb connect localhost:5555
          export DEVICE_ID=$(adb devices | grep 'device$' | awk 'NR==1{print $1}')
          echo "Using emulator: $DEVICE_ID"
          adb -s $DEVICE_ID wait-for-device
          adb -s $DEVICE_ID shell 'while [[ -z $(getprop sys.boot_completed) ]]; do sleep 1; done;'
          adb -s $DEVICE_ID shell input keyevent 82

      - name: 📱 Install APK
        run: |
          export DEVICE_ID=$(adb devices | grep 'device$' | awk 'NR==1{print $1}')
          adb -s $DEVICE_ID install -r app/build/outputs/apk/debug/app-debug.apk

      - name: 🧪 Run Maestro Tests and Capture Output
        run: |
          echo "🧹 Cleaning previous screenshots and logs..."
          rm -rf screenshots maestro-output.log || true
          mkdir -p screenshots

          echo "🚀 Running Maestro tests..."
          maestro test maestro_flows/flows.yaml | tee maestro-output.log

          echo "📂 Moving screenshots..."
          mv *.png screenshots/ || true

      - name: 📂 Prepare GitHub Pages Output
        if: always()
        run: |
          mkdir -p ./gh-pages/screenshots
          cp -v screenshots/*.png ./gh-pages/screenshots/ || true
          cp -v maestro-output.log ./gh-pages/ || true

      - name: 📄 Generate Pretty HTML Report
        if: always()
        run: |
          echo '<html><head><meta charset="UTF-8"><title>Maestro Test Report</title>
          <style>
            body { font-family: sans-serif; padding: 2rem; background: #f5f5f5; color: #222; }
            h1 { font-size: 2rem; }
            h2 { margin-top: 2rem; font-size: 1.5rem; }
            pre { background: #fff; padding: 1rem; border-radius: 0.5rem; white-space: pre-wrap; }
            .screenshot { margin-bottom: 2rem; }
            .screenshot img { border-radius: 0.5rem; border: 1px solid #ccc; max-width: 300px; display: block; margin-top: 0.5rem; }
          </style></head><body>' > ./gh-pages/index.html

          echo '<h1>🚀 Maestro Test Report</h1>' >> ./gh-pages/index.html

          echo '<h2>🗋 Summary</h2><pre>' >> ./gh-pages/index.html
          cat maestro-output.log >> ./gh-pages/index.html
          echo '</pre>' >> ./gh-pages/index.html

          echo '<h2>📸 Screenshots</h2>' >> ./gh-pages/index.html
          for img in ./gh-pages/screenshots/*.png; do
            base=$(basename "$img" .png)
            echo "<div class='screenshot'><strong>🔹 $base</strong><img src='screenshots/$base.png'/></div>" >> ./gh-pages/index.html
          done

          echo '</body></html>' >> ./gh-pages/index.html
