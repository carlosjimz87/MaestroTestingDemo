name: Maestro E2E with Docker Android Emulator

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write

jobs:
  maestro-e2e:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    services:
      emulator:
        image: budtmo/docker-android:emulator_11.0
        ports:
          - 6080:6080
          - 5554:5554
          - 5555:5555
        options: >-
          --privileged
          --device /dev/kvm
          -e EMULATOR_DEVICE="Samsung Galaxy S10"
          -e WEB_VNC=true
          -e APPIUM=false
          -e AUTO_RECORD=false
          -e ENFORCE_DEV_MODE=false

    steps:
      - name: 👅 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Build APK
        run: ./gradlew assembleDebug

      - name: 🧰 Install Maestro CLI
        run: |
          curl -Ls https://get.maestro.mobile.dev | bash
          echo "$HOME/.maestro/bin" >> $GITHUB_PATH

      - name: 🧰 Install ADB
        run: |
          sudo apt-get update
          sudo apt-get install -y android-tools-adb

      - name: 🛠️ Wait for Emulator
        run: |
          adb connect localhost:5555
          export DEVICE_ID=$(adb devices | grep 'device$' | awk 'NR==1{print $1}')
          echo "Using emulator: $DEVICE_ID"
          adb -s $DEVICE_ID wait-for-device
          adb -s $DEVICE_ID shell 'while [[ -z $(getprop sys.boot_completed) ]]; do sleep 1; done;'
          adb -s $DEVICE_ID shell input keyevent 82

      - name: 🚀 Run Maestro Tests
        run: |
          export DEVICE_ID=$(adb devices | grep 'device$' | awk 'NR==1{print $1}')
          echo "Using emulator: $DEVICE_ID"

          echo "✅ Verifying APK path..."
          ls -lh app/build/outputs/apk/debug/app-debug.apk || { echo "❌ APK not found!"; exit 1; }

          echo "📱 Installing APK on emulator..."
          adb -s $DEVICE_ID install app/build/outputs/apk/debug/app-debug.apk || { echo "❌ Failed to install APK"; exit 1; }

          echo "🔍 Checking installed packages..."
          adb -s $DEVICE_ID shell pm list packages | grep ${{ secrets.PACKAGE_NAME }} || { echo "❌ App not installed!"; exit 1; }

          echo "🚀 Running Maestro tests..."
          maestro test maestro_flows/flows.yaml --format junit --output maestro-report.xml

      - name: 📸 Capture Emulator Screenshot on Failure
        if: failure()
        run: adb exec-out screencap -p > screenshot.png || true

      - name: 🧩 Create placeholder screenshot if none
        if: success()
        run: |
          sudo apt-get update && sudo apt-get install -y imagemagick
          if [ ! -f screenshot.png ]; then
            echo "Creating placeholder screenshot..."
            convert -size 800x600 xc:white -gravity center -pointsize 24 -annotate 0 "✅ All tests passed" screenshot.png
          fi

      - name: 📄 Generate GitHub Pages HTML
        run: |
          mkdir -p maestro-artifacts
          echo "<html><head><title>Maestro Test Report</title></head><body>" > maestro-artifacts/index.html
          echo "<h1>🚀 Maestro Test Report</h1>" >> maestro-artifacts/index.html
          echo "<p>Download the <a href='maestro-report.xml'>Maestro JUnit Report</a> for details.</p>" >> maestro-artifacts/index.html
          echo "<h2>📸 Emulator Screenshot</h2><img src='screenshot.png' style='max-width:100%; border:1px solid #ccc;'/>" >> maestro-artifacts/index.html
          echo "</body></html>" >> maestro-artifacts/index.html

      - name: 🧾 Copy test results and screenshot
        run: |
          cp maestro-report.xml maestro-artifacts/
          cp screenshot.png maestro-artifacts/

      - name: 📤 Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        if: always()
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./maestro-artifacts